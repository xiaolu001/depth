// source: ProtoBuffer.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_any_pb = require('google-protobuf/google/protobuf/any_pb.js');
goog.object.extend(proto, google_protobuf_any_pb);
goog.exportSymbol('proto.Depth', null, global);
goog.exportSymbol('proto.Depth.Item', null, global);
goog.exportSymbol('proto.DepthSet', null, global);
goog.exportSymbol('proto.KLine', null, global);
goog.exportSymbol('proto.KLineSet', null, global);
goog.exportSymbol('proto.PushMessage', null, global);
goog.exportSymbol('proto.Statistics', null, global);
goog.exportSymbol('proto.Statistics.Line', null, global);
goog.exportSymbol('proto.Topic', null, global);
goog.exportSymbol('proto.Trade', null, global);
goog.exportSymbol('proto.Trade.Order', null, global);
goog.exportSymbol('proto.TradeEvent', null, global);
goog.exportSymbol('proto.TradeType', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.KLine = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.KLine, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.KLine.displayName = 'proto.KLine';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.KLineSet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.KLineSet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.KLineSet.displayName = 'proto.KLineSet';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Depth = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Depth.repeatedFields_, null);
};
goog.inherits(proto.Depth, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Depth.displayName = 'proto.Depth';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Depth.Item = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Depth.Item, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Depth.Item.displayName = 'proto.Depth.Item';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DepthSet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DepthSet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.DepthSet.displayName = 'proto.DepthSet';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Trade = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Trade.repeatedFields_, null);
};
goog.inherits(proto.Trade, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Trade.displayName = 'proto.Trade';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Trade.Order = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Trade.Order, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Trade.Order.displayName = 'proto.Trade.Order';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Statistics = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Statistics.repeatedFields_, null);
};
goog.inherits(proto.Statistics, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Statistics.displayName = 'proto.Statistics';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Statistics.Line = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Statistics.Line, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Statistics.Line.displayName = 'proto.Statistics.Line';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PushMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PushMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PushMessage.displayName = 'proto.PushMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TradeEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TradeEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.TradeEvent.displayName = 'proto.TradeEvent';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.KLine.prototype.toObject = function(opt_includeInstance) {
  return proto.KLine.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.KLine} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.KLine.toObject = function(includeInstance, msg) {
  var f, obj = {
    time: jspb.Message.getFieldWithDefault(msg, 1, 0),
    high: jspb.Message.getFieldWithDefault(msg, 2, ""),
    low: jspb.Message.getFieldWithDefault(msg, 3, ""),
    open: jspb.Message.getFieldWithDefault(msg, 4, ""),
    openTime: jspb.Message.getFieldWithDefault(msg, 5, 0),
    close: jspb.Message.getFieldWithDefault(msg, 6, ""),
    closeTime: jspb.Message.getFieldWithDefault(msg, 7, 0),
    volume: jspb.Message.getFieldWithDefault(msg, 8, ""),
    latestTimestamp: jspb.Message.getFieldWithDefault(msg, 9, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.KLine}
 */
proto.KLine.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.KLine;
  return proto.KLine.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.KLine} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.KLine}
 */
proto.KLine.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTime(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setHigh(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setLow(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setOpen(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setOpenTime(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setClose(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCloseTime(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setVolume(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLatestTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.KLine.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.KLine.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.KLine} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.KLine.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTime();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getHigh();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLow();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getOpen();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getOpenTime();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getClose();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getCloseTime();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.getVolume();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getLatestTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      9,
      f
    );
  }
};


/**
 * optional int64 time = 1;
 * @return {number}
 */
proto.KLine.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.KLine} returns this
 */
proto.KLine.prototype.setTime = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string high = 2;
 * @return {string}
 */
proto.KLine.prototype.getHigh = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.KLine} returns this
 */
proto.KLine.prototype.setHigh = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string low = 3;
 * @return {string}
 */
proto.KLine.prototype.getLow = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.KLine} returns this
 */
proto.KLine.prototype.setLow = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string open = 4;
 * @return {string}
 */
proto.KLine.prototype.getOpen = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.KLine} returns this
 */
proto.KLine.prototype.setOpen = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int64 open_time = 5;
 * @return {number}
 */
proto.KLine.prototype.getOpenTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.KLine} returns this
 */
proto.KLine.prototype.setOpenTime = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string close = 6;
 * @return {string}
 */
proto.KLine.prototype.getClose = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.KLine} returns this
 */
proto.KLine.prototype.setClose = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional int64 close_time = 7;
 * @return {number}
 */
proto.KLine.prototype.getCloseTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.KLine} returns this
 */
proto.KLine.prototype.setCloseTime = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional string volume = 8;
 * @return {string}
 */
proto.KLine.prototype.getVolume = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.KLine} returns this
 */
proto.KLine.prototype.setVolume = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional int64 latest_timestamp = 9;
 * @return {number}
 */
proto.KLine.prototype.getLatestTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.KLine} returns this
 */
proto.KLine.prototype.setLatestTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.KLineSet.prototype.toObject = function(opt_includeInstance) {
  return proto.KLineSet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.KLineSet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.KLineSet.toObject = function(includeInstance, msg) {
  var f, obj = {
    klinesMap: (f = msg.getKlinesMap()) ? f.toObject(includeInstance, proto.KLine.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.KLineSet}
 */
proto.KLineSet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.KLineSet;
  return proto.KLineSet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.KLineSet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.KLineSet}
 */
proto.KLineSet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getKlinesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.KLine.deserializeBinaryFromReader, "", new proto.KLine());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.KLineSet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.KLineSet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.KLineSet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.KLineSet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKlinesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.KLine.serializeBinaryToWriter);
  }
};


/**
 * map<string, KLine> klines = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.KLine>}
 */
proto.KLineSet.prototype.getKlinesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.KLine>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.KLine));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.KLineSet} returns this
 */
proto.KLineSet.prototype.clearKlinesMap = function() {
  this.getKlinesMap().clear();
  return this;};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Depth.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Depth.prototype.toObject = function(opt_includeInstance) {
  return proto.Depth.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Depth} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Depth.toObject = function(includeInstance, msg) {
  var f, obj = {
    asksList: jspb.Message.toObjectList(msg.getAsksList(),
    proto.Depth.Item.toObject, includeInstance),
    bidsList: jspb.Message.toObjectList(msg.getBidsList(),
    proto.Depth.Item.toObject, includeInstance),
    lastStrikePrice: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Depth}
 */
proto.Depth.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Depth;
  return proto.Depth.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Depth} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Depth}
 */
proto.Depth.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Depth.Item;
      reader.readMessage(value,proto.Depth.Item.deserializeBinaryFromReader);
      msg.addAsks(value);
      break;
    case 2:
      var value = new proto.Depth.Item;
      reader.readMessage(value,proto.Depth.Item.deserializeBinaryFromReader);
      msg.addBids(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setLastStrikePrice(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Depth.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Depth.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Depth} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Depth.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAsksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Depth.Item.serializeBinaryToWriter
    );
  }
  f = message.getBidsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.Depth.Item.serializeBinaryToWriter
    );
  }
  f = message.getLastStrikePrice();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Depth.Item.prototype.toObject = function(opt_includeInstance) {
  return proto.Depth.Item.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Depth.Item} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Depth.Item.toObject = function(includeInstance, msg) {
  var f, obj = {
    time: jspb.Message.getFieldWithDefault(msg, 1, 0),
    price: jspb.Message.getFieldWithDefault(msg, 2, ""),
    volume: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Depth.Item}
 */
proto.Depth.Item.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Depth.Item;
  return proto.Depth.Item.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Depth.Item} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Depth.Item}
 */
proto.Depth.Item.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTime(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrice(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setVolume(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Depth.Item.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Depth.Item.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Depth.Item} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Depth.Item.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTime();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getPrice();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getVolume();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional int64 time = 1;
 * @return {number}
 */
proto.Depth.Item.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Depth.Item} returns this
 */
proto.Depth.Item.prototype.setTime = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string price = 2;
 * @return {string}
 */
proto.Depth.Item.prototype.getPrice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Depth.Item} returns this
 */
proto.Depth.Item.prototype.setPrice = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string volume = 3;
 * @return {string}
 */
proto.Depth.Item.prototype.getVolume = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.Depth.Item} returns this
 */
proto.Depth.Item.prototype.setVolume = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated Item asks = 1;
 * @return {!Array<!proto.Depth.Item>}
 */
proto.Depth.prototype.getAsksList = function() {
  return /** @type{!Array<!proto.Depth.Item>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Depth.Item, 1));
};


/**
 * @param {!Array<!proto.Depth.Item>} value
 * @return {!proto.Depth} returns this
*/
proto.Depth.prototype.setAsksList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Depth.Item=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Depth.Item}
 */
proto.Depth.prototype.addAsks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Depth.Item, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Depth} returns this
 */
proto.Depth.prototype.clearAsksList = function() {
  return this.setAsksList([]);
};


/**
 * repeated Item bids = 2;
 * @return {!Array<!proto.Depth.Item>}
 */
proto.Depth.prototype.getBidsList = function() {
  return /** @type{!Array<!proto.Depth.Item>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Depth.Item, 2));
};


/**
 * @param {!Array<!proto.Depth.Item>} value
 * @return {!proto.Depth} returns this
*/
proto.Depth.prototype.setBidsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.Depth.Item=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Depth.Item}
 */
proto.Depth.prototype.addBids = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.Depth.Item, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Depth} returns this
 */
proto.Depth.prototype.clearBidsList = function() {
  return this.setBidsList([]);
};


/**
 * optional string last_strike_price = 3;
 * @return {string}
 */
proto.Depth.prototype.getLastStrikePrice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.Depth} returns this
 */
proto.Depth.prototype.setLastStrikePrice = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DepthSet.prototype.toObject = function(opt_includeInstance) {
  return proto.DepthSet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DepthSet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DepthSet.toObject = function(includeInstance, msg) {
  var f, obj = {
    depthsMap: (f = msg.getDepthsMap()) ? f.toObject(includeInstance, proto.Depth.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DepthSet}
 */
proto.DepthSet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DepthSet;
  return proto.DepthSet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DepthSet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DepthSet}
 */
proto.DepthSet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getDepthsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.Depth.deserializeBinaryFromReader, "", new proto.Depth());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DepthSet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DepthSet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DepthSet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DepthSet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDepthsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.Depth.serializeBinaryToWriter);
  }
};


/**
 * map<string, Depth> depths = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.Depth>}
 */
proto.DepthSet.prototype.getDepthsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.Depth>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.Depth));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.DepthSet} returns this
 */
proto.DepthSet.prototype.clearDepthsMap = function() {
  this.getDepthsMap().clear();
  return this;};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Trade.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Trade.prototype.toObject = function(opt_includeInstance) {
  return proto.Trade.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Trade} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Trade.toObject = function(includeInstance, msg) {
  var f, obj = {
    valuesList: jspb.Message.toObjectList(msg.getValuesList(),
    proto.Trade.Order.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Trade}
 */
proto.Trade.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Trade;
  return proto.Trade.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Trade} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Trade}
 */
proto.Trade.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Trade.Order;
      reader.readMessage(value,proto.Trade.Order.deserializeBinaryFromReader);
      msg.addValues(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Trade.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Trade.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Trade} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Trade.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValuesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Trade.Order.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Trade.Order.prototype.toObject = function(opt_includeInstance) {
  return proto.Trade.Order.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Trade.Order} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Trade.Order.toObject = function(includeInstance, msg) {
  var f, obj = {
    time: jspb.Message.getFieldWithDefault(msg, 1, 0),
    price: jspb.Message.getFieldWithDefault(msg, 2, ""),
    volume: jspb.Message.getFieldWithDefault(msg, 3, ""),
    type: jspb.Message.getFieldWithDefault(msg, 4, 0),
    id: jspb.Message.getFieldWithDefault(msg, 5, ""),
    symbol: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Trade.Order}
 */
proto.Trade.Order.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Trade.Order;
  return proto.Trade.Order.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Trade.Order} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Trade.Order}
 */
proto.Trade.Order.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTime(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrice(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setVolume(value);
      break;
    case 4:
      var value = /** @type {!proto.TradeType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setSymbol(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Trade.Order.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Trade.Order.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Trade.Order} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Trade.Order.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTime();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getPrice();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getVolume();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getSymbol();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional int64 time = 1;
 * @return {number}
 */
proto.Trade.Order.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Trade.Order} returns this
 */
proto.Trade.Order.prototype.setTime = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string price = 2;
 * @return {string}
 */
proto.Trade.Order.prototype.getPrice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Trade.Order} returns this
 */
proto.Trade.Order.prototype.setPrice = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string volume = 3;
 * @return {string}
 */
proto.Trade.Order.prototype.getVolume = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.Trade.Order} returns this
 */
proto.Trade.Order.prototype.setVolume = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional TradeType type = 4;
 * @return {!proto.TradeType}
 */
proto.Trade.Order.prototype.getType = function() {
  return /** @type {!proto.TradeType} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.TradeType} value
 * @return {!proto.Trade.Order} returns this
 */
proto.Trade.Order.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional string id = 5;
 * @return {string}
 */
proto.Trade.Order.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.Trade.Order} returns this
 */
proto.Trade.Order.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string symbol = 6;
 * @return {string}
 */
proto.Trade.Order.prototype.getSymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.Trade.Order} returns this
 */
proto.Trade.Order.prototype.setSymbol = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * repeated Order values = 1;
 * @return {!Array<!proto.Trade.Order>}
 */
proto.Trade.prototype.getValuesList = function() {
  return /** @type{!Array<!proto.Trade.Order>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Trade.Order, 1));
};


/**
 * @param {!Array<!proto.Trade.Order>} value
 * @return {!proto.Trade} returns this
*/
proto.Trade.prototype.setValuesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Trade.Order=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Trade.Order}
 */
proto.Trade.prototype.addValues = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Trade.Order, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Trade} returns this
 */
proto.Trade.prototype.clearValuesList = function() {
  return this.setValuesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Statistics.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Statistics.prototype.toObject = function(opt_includeInstance) {
  return proto.Statistics.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Statistics} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Statistics.toObject = function(includeInstance, msg) {
  var f, obj = {
    valuesList: jspb.Message.toObjectList(msg.getValuesList(),
    proto.Statistics.Line.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Statistics}
 */
proto.Statistics.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Statistics;
  return proto.Statistics.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Statistics} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Statistics}
 */
proto.Statistics.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Statistics.Line;
      reader.readMessage(value,proto.Statistics.Line.deserializeBinaryFromReader);
      msg.addValues(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Statistics.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Statistics.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Statistics} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Statistics.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValuesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Statistics.Line.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Statistics.Line.prototype.toObject = function(opt_includeInstance) {
  return proto.Statistics.Line.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Statistics.Line} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Statistics.Line.toObject = function(includeInstance, msg) {
  var f, obj = {
    time: jspb.Message.getFieldWithDefault(msg, 1, 0),
    high: jspb.Message.getFieldWithDefault(msg, 2, ""),
    low: jspb.Message.getFieldWithDefault(msg, 3, ""),
    open: jspb.Message.getFieldWithDefault(msg, 4, ""),
    openTime: jspb.Message.getFieldWithDefault(msg, 5, 0),
    close: jspb.Message.getFieldWithDefault(msg, 6, ""),
    closeTime: jspb.Message.getFieldWithDefault(msg, 7, 0),
    volume: jspb.Message.getFieldWithDefault(msg, 8, ""),
    rate: jspb.Message.getFieldWithDefault(msg, 9, 0),
    symbol: jspb.Message.getFieldWithDefault(msg, 10, ""),
    price: jspb.Message.getFieldWithDefault(msg, 11, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Statistics.Line}
 */
proto.Statistics.Line.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Statistics.Line;
  return proto.Statistics.Line.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Statistics.Line} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Statistics.Line}
 */
proto.Statistics.Line.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTime(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setHigh(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setLow(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setOpen(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setOpenTime(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setClose(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCloseTime(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setVolume(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRate(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setSymbol(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrice(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Statistics.Line.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Statistics.Line.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Statistics.Line} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Statistics.Line.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTime();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getHigh();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLow();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getOpen();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getOpenTime();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getClose();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getCloseTime();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.getVolume();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getRate();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = message.getSymbol();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getPrice();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
};


/**
 * optional int64 time = 1;
 * @return {number}
 */
proto.Statistics.Line.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Statistics.Line} returns this
 */
proto.Statistics.Line.prototype.setTime = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string high = 2;
 * @return {string}
 */
proto.Statistics.Line.prototype.getHigh = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Statistics.Line} returns this
 */
proto.Statistics.Line.prototype.setHigh = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string low = 3;
 * @return {string}
 */
proto.Statistics.Line.prototype.getLow = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.Statistics.Line} returns this
 */
proto.Statistics.Line.prototype.setLow = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string open = 4;
 * @return {string}
 */
proto.Statistics.Line.prototype.getOpen = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.Statistics.Line} returns this
 */
proto.Statistics.Line.prototype.setOpen = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int64 open_time = 5;
 * @return {number}
 */
proto.Statistics.Line.prototype.getOpenTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.Statistics.Line} returns this
 */
proto.Statistics.Line.prototype.setOpenTime = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string close = 6;
 * @return {string}
 */
proto.Statistics.Line.prototype.getClose = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.Statistics.Line} returns this
 */
proto.Statistics.Line.prototype.setClose = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional int64 close_time = 7;
 * @return {number}
 */
proto.Statistics.Line.prototype.getCloseTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.Statistics.Line} returns this
 */
proto.Statistics.Line.prototype.setCloseTime = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional string volume = 8;
 * @return {string}
 */
proto.Statistics.Line.prototype.getVolume = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.Statistics.Line} returns this
 */
proto.Statistics.Line.prototype.setVolume = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional int32 rate = 9;
 * @return {number}
 */
proto.Statistics.Line.prototype.getRate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.Statistics.Line} returns this
 */
proto.Statistics.Line.prototype.setRate = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional string symbol = 10;
 * @return {string}
 */
proto.Statistics.Line.prototype.getSymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.Statistics.Line} returns this
 */
proto.Statistics.Line.prototype.setSymbol = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string price = 11;
 * @return {string}
 */
proto.Statistics.Line.prototype.getPrice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.Statistics.Line} returns this
 */
proto.Statistics.Line.prototype.setPrice = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * repeated Line values = 1;
 * @return {!Array<!proto.Statistics.Line>}
 */
proto.Statistics.prototype.getValuesList = function() {
  return /** @type{!Array<!proto.Statistics.Line>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Statistics.Line, 1));
};


/**
 * @param {!Array<!proto.Statistics.Line>} value
 * @return {!proto.Statistics} returns this
*/
proto.Statistics.prototype.setValuesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Statistics.Line=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Statistics.Line}
 */
proto.Statistics.prototype.addValues = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Statistics.Line, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Statistics} returns this
 */
proto.Statistics.prototype.clearValuesList = function() {
  return this.setValuesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PushMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.PushMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PushMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PushMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    topic: jspb.Message.getFieldWithDefault(msg, 1, ""),
    symbol: jspb.Message.getFieldWithDefault(msg, 2, ""),
    data: (f = msg.getData()) && google_protobuf_any_pb.Any.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PushMessage}
 */
proto.PushMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PushMessage;
  return proto.PushMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PushMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PushMessage}
 */
proto.PushMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTopic(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSymbol(value);
      break;
    case 3:
      var value = new google_protobuf_any_pb.Any;
      reader.readMessage(value,google_protobuf_any_pb.Any.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PushMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PushMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PushMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PushMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTopic();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSymbol();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_any_pb.Any.serializeBinaryToWriter
    );
  }
};


/**
 * optional string topic = 1;
 * @return {string}
 */
proto.PushMessage.prototype.getTopic = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.PushMessage} returns this
 */
proto.PushMessage.prototype.setTopic = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string symbol = 2;
 * @return {string}
 */
proto.PushMessage.prototype.getSymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.PushMessage} returns this
 */
proto.PushMessage.prototype.setSymbol = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional google.protobuf.Any data = 3;
 * @return {?proto.google.protobuf.Any}
 */
proto.PushMessage.prototype.getData = function() {
  return /** @type{?proto.google.protobuf.Any} */ (
    jspb.Message.getWrapperField(this, google_protobuf_any_pb.Any, 3));
};


/**
 * @param {?proto.google.protobuf.Any|undefined} value
 * @return {!proto.PushMessage} returns this
*/
proto.PushMessage.prototype.setData = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PushMessage} returns this
 */
proto.PushMessage.prototype.clearData = function() {
  return this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PushMessage.prototype.hasData = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TradeEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.TradeEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TradeEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TradeEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    symbol: jspb.Message.getFieldWithDefault(msg, 1, ""),
    activeOrderId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    activeOrderUid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    activeOrderPrice: jspb.Message.getFieldWithDefault(msg, 4, ""),
    activeOrderType: jspb.Message.getFieldWithDefault(msg, 5, 0),
    matchedOrderId: jspb.Message.getFieldWithDefault(msg, 6, 0),
    matchedOrderUid: jspb.Message.getFieldWithDefault(msg, 7, 0),
    matchedOrderPrice: jspb.Message.getFieldWithDefault(msg, 8, ""),
    price: jspb.Message.getFieldWithDefault(msg, 9, ""),
    qty: jspb.Message.getFieldWithDefault(msg, 10, ""),
    depth: (f = msg.getDepth()) && proto.Depth.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TradeEvent}
 */
proto.TradeEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TradeEvent;
  return proto.TradeEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TradeEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TradeEvent}
 */
proto.TradeEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSymbol(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setActiveOrderId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setActiveOrderUid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setActiveOrderPrice(value);
      break;
    case 5:
      var value = /** @type {!proto.TradeType} */ (reader.readEnum());
      msg.setActiveOrderType(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMatchedOrderId(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMatchedOrderUid(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setMatchedOrderPrice(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrice(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setQty(value);
      break;
    case 11:
      var value = new proto.Depth;
      reader.readMessage(value,proto.Depth.deserializeBinaryFromReader);
      msg.setDepth(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TradeEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TradeEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TradeEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TradeEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSymbol();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getActiveOrderId();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getActiveOrderUid();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getActiveOrderPrice();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getActiveOrderType();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getMatchedOrderId();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getMatchedOrderUid();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.getMatchedOrderPrice();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getPrice();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getQty();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getDepth();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.Depth.serializeBinaryToWriter
    );
  }
};


/**
 * optional string symbol = 1;
 * @return {string}
 */
proto.TradeEvent.prototype.getSymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.TradeEvent} returns this
 */
proto.TradeEvent.prototype.setSymbol = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 active_order_id = 2;
 * @return {number}
 */
proto.TradeEvent.prototype.getActiveOrderId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.TradeEvent} returns this
 */
proto.TradeEvent.prototype.setActiveOrderId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 active_order_uid = 3;
 * @return {number}
 */
proto.TradeEvent.prototype.getActiveOrderUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.TradeEvent} returns this
 */
proto.TradeEvent.prototype.setActiveOrderUid = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string active_order_price = 4;
 * @return {string}
 */
proto.TradeEvent.prototype.getActiveOrderPrice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.TradeEvent} returns this
 */
proto.TradeEvent.prototype.setActiveOrderPrice = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional TradeType active_order_type = 5;
 * @return {!proto.TradeType}
 */
proto.TradeEvent.prototype.getActiveOrderType = function() {
  return /** @type {!proto.TradeType} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.TradeType} value
 * @return {!proto.TradeEvent} returns this
 */
proto.TradeEvent.prototype.setActiveOrderType = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional int64 matched_order_id = 6;
 * @return {number}
 */
proto.TradeEvent.prototype.getMatchedOrderId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.TradeEvent} returns this
 */
proto.TradeEvent.prototype.setMatchedOrderId = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int64 matched_order_uid = 7;
 * @return {number}
 */
proto.TradeEvent.prototype.getMatchedOrderUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.TradeEvent} returns this
 */
proto.TradeEvent.prototype.setMatchedOrderUid = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional string matched_order_price = 8;
 * @return {string}
 */
proto.TradeEvent.prototype.getMatchedOrderPrice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.TradeEvent} returns this
 */
proto.TradeEvent.prototype.setMatchedOrderPrice = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string price = 9;
 * @return {string}
 */
proto.TradeEvent.prototype.getPrice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.TradeEvent} returns this
 */
proto.TradeEvent.prototype.setPrice = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string qty = 10;
 * @return {string}
 */
proto.TradeEvent.prototype.getQty = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.TradeEvent} returns this
 */
proto.TradeEvent.prototype.setQty = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional Depth depth = 11;
 * @return {?proto.Depth}
 */
proto.TradeEvent.prototype.getDepth = function() {
  return /** @type{?proto.Depth} */ (
    jspb.Message.getWrapperField(this, proto.Depth, 11));
};


/**
 * @param {?proto.Depth|undefined} value
 * @return {!proto.TradeEvent} returns this
*/
proto.TradeEvent.prototype.setDepth = function(value) {
  return jspb.Message.setWrapperField(this, 11, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.TradeEvent} returns this
 */
proto.TradeEvent.prototype.clearDepth = function() {
  return this.setDepth(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.TradeEvent.prototype.hasDepth = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * @enum {number}
 */
proto.Topic = {
  NONE: 0,
  DEPTH: 1,
  TRADE: 2,
  STAT: 3,
  KLINE_1MIN: 4,
  KLINE_5MIN: 5,
  KLINE_15MIN: 6,
  KLINE_30MIN: 7,
  KLINE_1HOUR: 8,
  KLINE_1DAY: 9,
  KLINE_1WEEK: 10,
  KLINE_1MON: 11,
  DEPTH_SET: 12
};

/**
 * @enum {number}
 */
proto.TradeType = {
  ASK: 0,
  BID: 1
};

goog.object.extend(exports, proto);
