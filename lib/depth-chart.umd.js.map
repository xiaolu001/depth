{"version":3,"sources":["webpack://depth-chart/webpack/universalModuleDefinition","webpack://depth-chart/webpack/bootstrap","webpack://depth-chart/./node_modules/_current-script-polyfill@1.0.0@current-script-polyfill/currentScript.js","webpack://depth-chart/./node_modules/_@vue_cli-service@4.2.3@@vue/cli-service/lib/commands/build/setPublicPath.js","webpack://depth-chart/./packages/internal/ViewPortHandler.js","webpack://depth-chart/./packages/chart/Chart.js","webpack://depth-chart/./packages/render/Render.js","webpack://depth-chart/./packages/render/AxisRender.js","webpack://depth-chart/./packages/render/XAxisRender.js","webpack://depth-chart/./packages/render/YAxisRender.js","webpack://depth-chart/./packages/render/MainRender.js","webpack://depth-chart/./packages/chart/MainChart.js","webpack://depth-chart/./packages/render/MaskRender.js","webpack://depth-chart/./packages/chart/MaskChart.js","webpack://depth-chart/./packages/internal/DataProvider.js","webpack://depth-chart/./packages/internal/eventHelper.js","webpack://depth-chart/./packages/internal/MouseEvent.js","webpack://depth-chart/./packages/chart/RootChart.js","webpack://depth-chart/./packages/index.js","webpack://depth-chart/./node_modules/_@vue_cli-service@4.2.3@@vue/cli-service/lib/commands/build/entry-lib.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;QCVA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;;;;;;;;;;;AClFA;;AAEA;;AAEA;AACA;AACA,wDAAwD;;AAExD;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,mBAAmB;AAChC;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,CAAC;;;;;;;;;;;;;ACnCD;;AAEA;AACA,MAAM,IAAuC;AAC7C,IAAI,mBAAO,CAAC,MAAyB;AACrC;;AAEA;AACA;AACA,IAAI,qBAAuB;AAC3B;AACA;;AAEA;AACe,sDAAI;;;ACdnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe,4EAAe;;;AClE2B;;AAEzD,MAAM,WAAK;AACX;AACA,+BAA+B,wBAAe;;AAE9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,SAAS;AAC3C,oCAAoC,MAAM;AAC1C,qCAAqC,OAAO;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,2DAAK,E;;AC1DpB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe,wDAAM;;;ACRQ;AAC7B,MAAM,qBAAU,SAAS,aAAM;AAC/B;AACA;AACA;AACA;AACe,2E;;ACNsB;;AAErC,MAAM,uBAAW,SAAS,iBAAU;;AAEpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,4DAA4D;;AAE5D;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACe,8E;;AC1DsB;;AAErC,MAAM,uBAAW,SAAS,iBAAU;;AAEpC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,kBAAkB;AACxC,SAAS;AACT;AACA,sBAAsB,kBAAkB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACe,uE;;AClGc;AAC7B,MAAM,qBAAU,SAAS,aAAM;AAC/B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,aAAa;AAC5B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,2E;;ACvEY;AACoB;AACA;AACF;AAC7C,MAAM,mBAAS,SAAS,WAAK;AAC7B;AACA;AACA;AACA,+BAA+B,kBAAW;AAC1C,+BAA+B,WAAW;AAC1C,8BAA8B,iBAAU;AACxC;AACA;AACA,eAAe,sBAAsB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACe,uE;;;;;ACrBe;AACY;AAC1C,MAAM,qBAAU,SAAS,aAAM;AAC/B;AACA;AACA;AACA;AACA,sBAAsB,aAAM;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,wBAAwB,kCAAkC;AAC1D;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,wBAAwB,8CAA8C;AACtE;AACA;AACA;AACe,2EAAU,E;;ACxFE;AACkB;AAC7C,MAAM,mBAAS,SAAS,WAAK;AAC7B;AACA;AACA;AACA;AACA,8BAA8B,iBAAU;;;AAGxC;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACe,uEAAS,E;;;ACvDxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,SAAS;AAChC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,SAAS;AAChC;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uBAAuB,SAAS;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACe,sE;;;AC1Kf;AACA;AACA;AACA;AACO;AACP;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;;;;AChBmD;AACnD,MAAM,qBAAU;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,kBAAkB;AAC/B,QAAQ,SAAS;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,SAAS;;AAEjB;AACA;AACA;AACe,6EAAU,E;;;;;;ACrBE;;;AAGQ;AACA;AACgB;AACJ;AACC;AAChD,MAAM,wBAAc,SAAS,WAAK;AAClC;AACA;AACA,aAAa,6DAA6D;AAC1E;AACA;AACA,8BAA8B,OAAO;AACrC,6BAA6B,MAAM;AACnC;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA,SAAS;AACT;;;AAGA,0CAA0C,MAAa;;AAEvD;;;AAGA,gCAAgC,qBAAY;;AAE5C;AACA,6BAA6B,eAAS;AACtC;;AAEA,6BAA6B,eAAS;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,mBAAU;AACzC;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACe,sE;;AC9G4B;AAC5B,wD;;ACDS;AACA;AACT,yFAAG;AACI","file":"depth-chart.umd.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"depth-chart\"] = factory();\n\telse\n\t\troot[\"depth-chart\"] = factory();\n})((typeof self !== 'undefined' ? self : this), function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"fd77\");\n","// document.currentScript polyfill by Adam Miller\n\n// MIT license\n\n(function(document){\n  var currentScript = \"currentScript\",\n      scripts = document.getElementsByTagName('script'); // Live NodeList collection\n\n  // If browser needs currentScript polyfill, add get currentScript() to the document object\n  if (!(currentScript in document)) {\n    Object.defineProperty(document, currentScript, {\n      get: function(){\n\n        // IE 6-10 supports script readyState\n        // IE 10+ support stack trace\n        try { throw new Error(); }\n        catch (err) {\n\n          // Find the second match for the \"at\" string to get file src url from stack.\n          // Specifically works with the format of stack traces in IE.\n          var i, res = ((/.*at [^\\(]*\\((.*):.+:.+\\)$/ig).exec(err.stack) || [false])[1];\n\n          // For all scripts on the page, if src matches or if ready state is interactive, return the script tag\n          for(i in scripts){\n            if(scripts[i].src == res || scripts[i].readyState == \"interactive\"){\n              return scripts[i];\n            }\n          }\n\n          // If no match, return null\n          return null;\n        }\n      }\n    });\n  }\n})(document);\n","// This file is imported into lib/wc client bundles.\n\nif (typeof window !== 'undefined') {\n  if (process.env.NEED_CURRENTSCRIPT_POLYFILL) {\n    require('current-script-polyfill')\n  }\n\n  var i\n  if ((i = window.document.currentScript) && (i = i.src.match(/(.+\\/)[^/]+\\.js(\\?.*)?$/))) {\n    __webpack_public_path__ = i[1] // eslint-disable-line\n  }\n}\n\n// Indicate to webpack that this file can be concatenated\nexport default null\n","class ViewPortHandler {\n  constructor() {\n    // 绘制区域参数\n    this.contentRect = {\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    }\n    // 整个view的高度\n    this.height = 0\n    // 整个view的宽度\n    this.width = 0\n  }\n\n  /**\n   * 设置尺寸\n   * @param width\n   * @param height\n   * @param offsetLeft\n   * @param offsetRight\n   * @param offsetTop\n   * @param offsetBottom\n   */\n  setDimensions(width, height, offsetLeft, offsetRight, offsetTop, offsetBottom) {\n\n    this.width = width\n    this.height = height\n    this.contentRect.left = offsetLeft\n    this.contentRect.right = offsetRight\n    this.contentRect.top = offsetTop\n    this.contentRect.bottom = offsetBottom\n  }\n\n  contentTop() {\n    return this.contentRect.top\n  }\n\n  contentLeft() {\n    return this.contentRect.left\n  }\n\n  contentRight() {\n    return this.width - this.contentRect.right\n  }\n\n  contentBottom() {\n    return this.height - this.contentRect.bottom\n  }\n  // mainChartWidth(){\n\n  // }\n  // mainChartWidth(){\n\n  // }\n  /**\n   * 获取中间点坐标\n   */\n  getContentCenter() {\n    const point = {}\n    point.x = (this.contentLeft() + this.contentRight()) / 2\n    point.y = (this.contentTop() + this.contentBottom()) / 2\n    return point\n  }\n}\n\nexport default ViewPortHandler\n","import ViewPortHandler from '../internal/ViewPortHandler'\n\nclass Chart {\n  constructor() {\n    this.viewPortHandler = new ViewPortHandler();\n\n  }\n  init(dom) {\n    if (dom) {\n      const canvasDom = document.createElement('canvas');\n      canvasDom.style.position = 'absolute'\n      canvasDom.style.right = '0'\n      canvasDom.style.left = '0'\n      this.canvasDom = canvasDom;\n      this.ctx = this.canvasDom.getContext('2d');\n      dom.appendChild(this.canvasDom);\n    }\n\n  }\n  /**\n* 设置图尺寸\n* @param chartTop\n* @param width\n* @param height\n* @param offsetLeft\n* @param offsetRight\n* @param offsetTop\n* @param offsetBottom\n*/\n  setChartDimensions(chartTop, width, height, offsetLeft, offsetRight, offsetTop = 0, offsetBottom = 25) {\n    this.clearCanvas()\n    this.canvasDom.style.top = `${chartTop}px`\n    this.canvasDom.style.width = `${width}px`\n    this.canvasDom.style.height = `${height}px`\n    this.canvasDom.width = width\n    this.canvasDom.height = height\n    this.viewPortHandler.setDimensions(width, height, offsetLeft, offsetRight, offsetTop, offsetBottom)\n    this.draw()\n  }\n  /**\n* 清空画布\n*/\n  clearCanvas() {\n    this.ctx.clearRect(0, 0, this.viewPortHandler.width, this.viewPortHandler.height)\n  }\n  /**\n   * 刷新\n   */\n  flush() {\n    this.clearCanvas()\n    this.draw()\n  }\n  /**\n* 绘制\n*/\n  draw() {\n  }\n}\nexport default Chart;","class Render {\n  constructor(viewPortHandler, dataProvider, interval) {\n    this.viewPortHandler = viewPortHandler\n    this.dataProvider = dataProvider\n    this.interval = interval\n  }\n}\n\nexport default Render\n","import Render from './Render'\nclass AxisRender extends Render {\n    constructor(viewPortHandler, dataProvider,interval) {\n        super(viewPortHandler, dataProvider,interval)\n    }\n}\nexport default AxisRender","import AxisRender from \"./AxisRender\"\n\nclass XAxisRender extends AxisRender {\n\n    /**\n    * 绘制轴线\n    * @param ctx\n    * @param xAxis\n    */\n    renderAxisLine(ctx, xAxis) {\n        ctx.strokeStyle = xAxis.line.color //轴线颜色\n        ctx.lineWidth = xAxis.line.size //轴线粗细\n        ctx.beginPath()\n        ctx.moveTo(this.viewPortHandler.contentLeft(), this.viewPortHandler.contentBottom())\n        ctx.lineTo(this.viewPortHandler.contentRight(), this.viewPortHandler.contentBottom())\n        ctx.stroke()\n        ctx.closePath()\n    }\n\n    /**\n    * 绘制刻度\n    * @param ctx\n    * @param xAxis\n    */\n    renderTickLines(ctx, xAxis) {\n        ctx.lineWidth = xAxis.tickLine.size\n        ctx.strokeStyle = xAxis.tickLine.color\n        ctx.textAlign = 'center'\n        ctx.font = \"12px sans-serif\"\n        ctx.fillStyle = xAxis.tickLine.color;\n        const startY = this.viewPortHandler.contentBottom()\n        const endY = startY + 5\n        const startX = (this.viewPortHandler.contentRight() / 30)\n        \n         let yAxisWidth = 0\n        // if (yAxis.position === \"left\") {\n        //     yAxisWidth += yAxis.width\n        // }\n        const divide = startX * 4\n        const difference = this.dataProvider.adjacent() * 2;  //this.dataProvider.maxPrice() - this.dataProvider.minPrice();\n\n        const startVol = difference / 30\n        const divideVol = startVol * 4\n        const decimal = this.dataProvider.getPriceDecimal()\n        for (let i = 0; i < 8; i++) {\n            const x = yAxisWidth + startX + i * divide;\n            const vol = this.dataProvider.minPrice() + startVol + i * divideVol;\n            ctx.beginPath()\n            ctx.moveTo(x, startY)\n            ctx.lineTo(x, endY)\n\n            ctx.fillText(vol.toFixed(decimal), x, endY + 10);\n            ctx.stroke()\n            ctx.closePath()\n        }\n    }\n\n}\nexport default XAxisRender","import AxisRender from \"./AxisRender\"\n\nclass XAxisRender extends AxisRender {\n\n    /**\n   * 绘制轴线\n   * @param ctx\n   * @param yAxis\n   */\n    renderAxisLine(ctx, yAxis) {\n\n        ctx.strokeStyle = yAxis.line.color\n        ctx.lineWidth = yAxis.line.size\n        ctx.beginPath()\n        if (yAxis.position === 'left') {\n            ctx.moveTo(this.viewPortHandler.contentLeft(), this.viewPortHandler.contentTop())\n            ctx.lineTo(this.viewPortHandler.contentLeft(), this.viewPortHandler.contentBottom())\n        } else {\n            ctx.moveTo(this.viewPortHandler.contentRight(), this.viewPortHandler.contentTop())\n            ctx.lineTo(this.viewPortHandler.contentRight(), this.viewPortHandler.contentBottom())\n        }\n\n        ctx.stroke()\n        ctx.closePath()\n    }\n    /**\n   * 绘制刻度\n   * @param ctx\n   * @param xAxis\n   */\n    renderTickLines(ctx, yAxis) {\n        ctx.lineWidth = yAxis.tickLine.size;\n        ctx.strokeStyle = yAxis.tickLine.color;\n        ctx.font = \"12px sans-serif\";\n        ctx.textBaseline = \"middle\";\n        ctx.textAlign = \"left\";\n        ctx.fillStyle = yAxis.tickLine.color;\n        const tickLineLength = 5;\n        let startX;\n        let endX;\n        if (yAxis.position === 'left') {\n            startX = this.viewPortHandler.contentLeft()\n            if (yAxis.tickTextPosition === 'outside') {\n                endX = startX - tickLineLength //刻度内置\n            } else {\n                endX = startX + tickLineLength//刻度外置\n            }\n        } else {\n            startX = this.viewPortHandler.contentRight()\n            if (yAxis.tickTextPosition === 'outside') {\n                endX = startX + tickLineLength//刻度内置\n            } else {\n                endX = startX - tickLineLength//刻度外置\n            }\n        }\n       \n        const height = this.viewPortHandler.contentBottom();\n        const maxVol = this.dataProvider.maxVol()\n        const divide = (height / 16) * 3\n        const divideVol = (maxVol / 16) * 3\n\n        for (let i = 0; i < 6; i++) {\n            const y = height - i * divide\n            const xVol = this.renderTickLinesValue(i * divideVol)\n            ctx.beginPath()\n            ctx.moveTo(startX, y)\n            ctx.lineTo(endX, y)\n            ctx.fillText(xVol, endX + 5, y)\n            ctx.stroke()\n            ctx.closePath()\n        }\n    }\n    /**\n     * 刻度值显示规则处理\n     * @param value\n     */\n    renderTickLinesValue(value) {\n        if (value > 1000) {\n            let val = (value / 10000).toString()\n            return `${this.decimal(val)}K`\n        } else if (value > 1000000) {\n            let val = (value / 1000000).toString()\n            return `${this.decimal(val)}M`\n        }\n        return value\n    }\n    decimal(val) {\n        if (val.indexOf('.') > -1) {\n            let str = val.substr(0, 5);\n            if (str.charAt(str.length - 1) === '.') {\n                return val.substr(0, 4)\n            }\n            return str\n        } else {\n            return val.substr(0, 4)\n        }\n    }\n}\nexport default XAxisRender","import Render from \"./Render\"\nclass MainRender extends Render {\n    renderDraw(ctx, depth) {\n\n        const max = this.dataProvider.maxVol()\n        const width = (this.viewPortHandler.contentRight() - this.interval) / 2\n        const height = this.viewPortHandler.contentBottom()\n        const leftData = this.dataProvider.leftData\n        const rightData = this.dataProvider.rightData\n        const leftDataLenght = leftData.length\n        const rightDataLenght = rightData.length\n        const letfDataWidth = width / leftDataLenght\n        const rightDataWidth = width / rightDataLenght\n        const { background } = depth\n        this.drawBg(ctx, this.viewPortHandler.width, this.viewPortHandler.height, background)\n        this.drawLeft(ctx, width, height, max, leftData, letfDataWidth, depth)\n        this.drawRight(ctx, width, height, max, rightData, rightDataWidth, depth)\n\n    }\n    drawLeft(ctx, width, height, max, leftData, dataWidth, depth) {\n        let x = 0, y = 0\n        ctx.beginPath()\n        ctx.lineWidth = 2\n        ctx.moveTo(width, height)\n        leftData.forEach((item, index) => {\n            x = width - parseInt(index) * dataWidth\n            y = height - item.t / max * height\n            ctx.lineTo(x, y)\n        })\n        ctx.fillStyle = depth.buyColor\n        ctx.strokeStyle = depth.buyColor\n        ctx.stroke()\n        ctx.globalAlpha = depth.globalAlpha\n        ctx.lineTo(0, y)\n        ctx.lineTo(0, height)\n        ctx.lineTo(width, height)\n        ctx.fill()\n        ctx.closePath()\n    }\n    drawRight(ctx, width, height, max, rightData, dataWidth, depth) {\n        let x = 0, y = 0\n        ctx.beginPath()\n        ctx.globalAlpha = 1\n        ctx.lineWidth = depth.lineWidth\n        ctx.moveTo(width + this.interval, height)\n        rightData.forEach((item, index) => {\n            x = width + this.interval + parseInt(index) * dataWidth + 1\n            y = height - item.t / max * height\n            ctx.lineTo(x, y)\n        })\n        ctx.fillStyle = depth.sellColor\n        ctx.strokeStyle = depth.sellColor\n        ctx.shadowColor = \"none\"\n        ctx.stroke()\n        ctx.globalAlpha = depth.globalAlpha\n        ctx.lineTo(width * 2 + this.interval, y)\n        ctx.lineTo(width * 2 + this.interval, height)\n        ctx.lineTo(width + this.interval, height)\n        ctx.fill()\n        ctx.closePath()\n\n    }\n    drawBg(ctx, width, height, background) {\n\n        ctx.beginPath()\n        ctx.globalAlpha = 1\n        ctx.fillStyle = background\n        ctx.fillRect(0, 0, width, height)\n        ctx.closePath()\n    }\n}\nexport default MainRender","import Chart from \"./Chart\"\nimport XAxisRender from \"../render/XAxisRender\"\nimport YAxisRender from \"../render/YAxisRender\"\nimport MainRender from \"../render/MainRender\"\nclass MainChart extends Chart {\n    constructor(dom, dataProvider, interval, style) {\n        super(dom)\n        this.style = style;\n        this.xAxisRender = new XAxisRender(this.viewPortHandler, dataProvider, interval)\n        this.yAxisRender = new YAxisRender(this.viewPortHandler, dataProvider, interval)\n        this.mainRender = new MainRender(this.viewPortHandler, dataProvider, interval)\n    }\n    draw() {\n        const { xAxis, yAxis, depth } = this.style\n        this.mainRender.renderDraw(this.ctx, depth)\n        this.yAxisRender.renderAxisLine(this.ctx, yAxis)\n        this.yAxisRender.renderTickLines(this.ctx, yAxis)\n        this.xAxisRender.renderAxisLine(this.ctx, xAxis)\n        this.xAxisRender.renderTickLines(this.ctx, xAxis,yAxis)\n    }\n}\nexport default MainChart","import Render from \"./Render\";\nimport locale from \"../config/locale.json\"\nclass MaskRender extends Render {\n    constructor(viewPortHandler, dataProvider, interval) {\n        super(viewPortHandler, dataProvider, interval)\n        this.interval = interval;\n        this.dataProvider = dataProvider;\n        this.locale = locale[this.dataProvider.getLocale()]\n        this.priceDecimal = this.dataProvider.getPriceDecimal()\n        this.valueDecimal = this.dataProvider.getValueDecimal()\n    }\n    point(ctx, offsetX, offsetY, selectColor) {\n        ctx.beginPath()\n        ctx.globalAlpha = 0.5\n        ctx.fillStyle = selectColor\n        ctx.arc(offsetX, offsetY, 12, 0, 2 * Math.PI)\n        ctx.fill()\n        ctx.closePath()\n        ctx.beginPath()\n        ctx.globalAlpha = 0.8\n        ctx.fillStyle = selectColor\n\n        ctx.arc(offsetX, offsetY, 8, 0, 2 * Math.PI)\n        ctx.fill()\n        ctx.closePath()\n        ctx.beginPath()\n        ctx.globalAlpha = 1\n        ctx.fillStyle = 'rgba(255,255,255, 1)'\n        ctx.arc(offsetX, offsetY, 5, 0, 2 * Math.PI)\n        ctx.fill()\n        ctx.closePath()\n    }\n    popup(ctx, offsetX, offsetY, selectColor, direction) {\n\n        offsetY = offsetY > 140 ? offsetY - 130 : offsetY + 30;\n\n        let newOffsetX = direction ? offsetX - 160 : offsetX\n\n        //线\n        ctx.beginPath()\n\n        ctx.globalAlpha = 1\n        ctx.fillStyle = selectColor;\n        ctx.fillRect(offsetX, offsetY, 4, 100)\n        ctx.closePath()\n        //框\n        ctx.beginPath()\n        ctx.fillStyle = selectColor;\n        ctx.globalAlpha = 0.4\n\n        ctx.fillRect(newOffsetX, offsetY, 160, 100)\n        ctx.closePath()\n\n    }\n    labelText(ctx, offsetX, offsetY, selectColor, direction, item) {\n        offsetY = offsetY > 140 ? offsetY : offsetY + 160;\n        let newOffsetX = direction ? offsetX - 140 : offsetX + 20\n\n        ctx.beginPath()\n        ctx.font = '14px SFCompactDisplay-Semibold,SFCompactDisplay'\n        ctx.fillStyle = selectColor\n        ctx.globalAlpha = 0.8\n        ctx.fillText(this.locale['price'], newOffsetX, offsetY - 110);\n        ctx.closePath()\n\n        ctx.beginPath()\n        ctx.font = '14px bold'\n        ctx.fillStyle = \"#fff\";\n        ctx.globalAlpha = 1\n        ctx.fillText(`${item.p.toFixed(this.priceDecimal)}`, newOffsetX, offsetY - 90);\n        ctx.closePath()\n\n        ctx.beginPath()\n        ctx.font = '14px bold'\n        ctx.fillStyle = selectColor\n        ctx.globalAlpha = 0.8\n\n        ctx.fillText(this.locale['sum'], newOffsetX, offsetY - 65);\n        ctx.closePath()\n\n        ctx.beginPath()\n        ctx.font = '14px bold'\n        ctx.fillStyle = \"#fff\";\n        ctx.globalAlpha = 1\n        ctx.fillText(`${parseFloat(item.t).toFixed(this.valueDecimal)}`, newOffsetX, offsetY - 45);\n        ctx.closePath()\n    }\n}\nexport default MaskRender;","import Chart from \"./Chart\"\nimport MaskRender from \"../render/MaskRender\"\nclass MaskChart extends Chart {\n    constructor(dom, dataProvider, interval, style) {\n        super(dom)\n        this.interval = interval;\n        this.dataProvider = dataProvider;\n        this.maskRender = new MaskRender(this.viewPortHandler,dataProvider, interval);\n        \n\n        this.style = style;\n       \n    }\n   \n    draw(offsetX) {\n        this.maxVol = this.dataProvider.maxVol()\n      \n        let width = this.viewPortHandler.contentRight();\n        let height = this.viewPortHandler.contentBottom()\n        let halfWidth = width / 2;\n        let middleStart = halfWidth - this.interval / 2;\n        let middleEnd = halfWidth + this.interval / 2;\n        if ((middleStart < offsetX && offsetX < middleEnd) || offsetX > width || offsetX < 0) {\n            return false;\n        }\n        let direction = offsetX > halfWidth ? true : false\n        let { depth } = this.style\n        let selectColor = !direction ? depth.buyColor : depth.sellColor\n        let itemWidth = middleStart / 200;\n        let offsetXIndex = Math.floor(offsetX / itemWidth) || 0\n        let intervalIndex = Math.floor(this.interval / itemWidth) || 0\n        let index = offsetXIndex > 199 ? (offsetXIndex - intervalIndex) : offsetXIndex;\n\n        let data = []\n        if (direction) {\n            data = this.dataProvider.rightData\n            index = index - 200;\n        } else {\n            data = this.dataProvider.leftData\n            index = 199 - index;\n        }\n        let item = data[index];\n       \n        if (item) {\n            let offsetY = height - item.t / this.maxVol * height\n            this.maskRender.point(this.ctx, offsetX, offsetY, selectColor)\n            this.maskRender.popup(this.ctx, offsetX, offsetY, selectColor, direction, item)\n            this.maskRender.labelText(this.ctx, offsetX, offsetY, selectColor, direction, item)\n        }\n\n    }\n    flush(offsetX, offsetY) {\n        this.clearCanvas()\n        this.draw(offsetX, offsetY)\n    }\n}\nexport default MaskChart;","\nclass DataProvider {\n    constructor() {\n        this.data = {}\n        this.decimal = 0\n        this.leftData = []\n        this.rightData = []\n    }\n    init(data, decimal,locale) {\n       \n        this.data = data\n        this.length = 200;\n        this.decimal = decimal\n        this.locale = locale\n        this.leftData = this.dataFill(this.data['bids'], 'bids') //买\n        this.rightData = this.dataFill(this.data['asks'], 'asks') //卖\n        \n    }\n\n    /**\n     * x轴半轴长\n     * \n     */\n    adjacent() {\n        let leftArray = this.data['bids']\n        let leftArrayLength = leftArray.length;\n        let rightArray = this.data['asks']\n        let rightArrayLength = rightArray.length;\n        if (leftArrayLength < 1 || rightArrayLength < 1) {\n            console.log(\"数据长度不够\")\n            return false\n        }\n        const vol1 = Math.abs(leftArray[0].price - leftArray[leftArrayLength - 1].price)\n        const vol2 = Math.abs(rightArray[0].price - rightArray[rightArrayLength - 1].price)\n        const min = Math.min(vol1, vol2);\n        return min\n    }\n    getPriceDecimal() {\n        return parseInt(this.decimal.price)\n    }\n    getValueDecimal(){\n        return parseInt(this.decimal.value)\n    }\n    getLocale(){\n        return this.locale\n    }\n    initDataLeft(key) {\n        let arr = []\n        let minPrice = this.minPrice();\n\n        let semiaxis = this.adjacent()\n        let difference = semiaxis / this.length\n        let len = this.length\n        let total = 0\n        if (key == 'asks') {\n            minPrice = minPrice + semiaxis;\n        }\n        for (let i = 0; i < len; i++) {\n            let obj = {\n                p: minPrice + difference * i,\n                v: 0,\n                t: total\n            }\n\n            arr.push(obj)\n        }\n        if (key == 'asks') {\n            return arr\n        }\n        return arr.reverse()\n    }\n    dataFill(array, key) {\n        let arr = this.initDataLeft(key)\n        let len = this.length\n        let semiaxis = this.adjacent()\n        let difference = semiaxis / this.length\n        let total = 0\n        for (let i = 0; i < len; i++) {\n            let item = arr[i]\n\n            array.forEach(element => {\n                if (Math.abs(item.p - element.price) < difference) {\n                    total = total + element.volume\n                    item.v = element.volume\n\n                }\n                item.t = total.toFixed(8);\n            })\n\n        }\n        return arr;\n    }\n    originalData(array, key) {\n        let arr = []\n        let min = this.minPrice();\n        let semiaxis = this.adjacent()\n        let minPrice = min\n        if (key == 'asks') {\n            minPrice = min + semiaxis;\n        } else {\n            // debugger\n            // console.log('bids', array)\n            // let arr1 = array = array.reverse()\n            // console.log('bids', arr1)\n        }\n\n        let difference = semiaxis / this.length\n        let len = this.length;\n        let total = 0\n        for (let i = 0; i < len; i++) {\n            let obj = {\n                p: minPrice + difference * i,\n                v: 0,\n                t: total\n            }\n            array.forEach(element => {\n                if (Math.abs(obj.p - element.price) <difference) {\n                    total = total + element.volume;\n                    obj.v = element.volume\n                    obj.t = total;\n                }\n            })\n            arr.push(obj);\n        }\n        //console.log(arr)\n        return arr\n    }\n    processingData(array) {\n        let total = 0\n        let arr = []\n        let max = this.maxPrice();\n        if (array.length > 0) {\n            let keys = Object.keys(array[0])\n            array.forEach(element => {\n                // console.log(element,max)\n                if (element.price > max) {\n                    return;\n                }\n                total += element[keys[1]]\n                element = {\n                    p: element[keys[0]],\n                    v: element[keys[1]],\n                    t: total\n                }\n\n                arr.push(element)\n            })\n            // console.log(arr)\n            return arr\n        }\n        return []\n\n    }\n    maxPrice() {\n        return this.adjacent() * 2 + this.minPrice();\n    }\n    minPrice() {\n        let len = this.data['bids'].length - 1\n        if (len > 0) {\n            return this.data['bids'][len].price\n        }\n    }\n    maxVol() {\n        let leftLen = this.leftData.length - 1;\n        let rightLent = this.rightData.length - 1\n        let max = Math.max(this.leftData[leftLen].t, this.rightData[rightLent].t)\n        return max + max / 8\n\n    }\n\n}\nexport default DataProvider","\n/**\n * 阻止事件\n * @param e\n */\nexport function stopEvent (e) {\n  if (e && e.stopPropagation) {\n    e.stopPropagation()\n  } else {\n    window.event.cancelBubble = true\n  }\n  if (e && e.preventDefault) {\n    e.preventDefault()\n  } else {\n    window.event.returnValue = false\n  }\n}\n\n\n","import { stopEvent } from \"../internal/eventHelper\"\nclass MouseEvent {\n    constructor(maskChart, dataProvider, viewPortHandler) {\n        this.maskChart = maskChart;\n        this.dataProvider = dataProvider;\n        this.viewPortHandler = viewPortHandler;\n    }\n    mouseMove(e) {\n        let { offsetX,offsetY } = e;\n        stopEvent(e)\n        if (!this.waitingForMouseMoveAnimationFrame) {\n            this.waitingForMouseMoveAnimationFrame = true\n            this.maskChart.flush(offsetX,offsetY);\n            this.waitingForMouseMoveAnimationFrame = false\n        }\n    }\n    mouseLeave(e) {\n        stopEvent(e)\n\n        this.maskChart.clearCanvas();\n    }\n}\nexport default MouseEvent;","\nimport Chart from \"./Chart\"\n\n\nimport MainChart from \"./MainChart\"\nimport MaskChart from \"./MaskChart\"\nimport DataProvider from \"../internal/DataProvider\"\nimport MouseEvent from \"../internal/MouseEvent\"\nimport styeleConfing from \"../config/index.json\"\nclass DepthMainChart extends Chart {\n    constructor(params) {\n        super(params.dom)\n        let { dom, width, height, data, decimal, interval, style, locale } = params\n        this.dom = dom\n        dom.style.position = 'relative'\n        dom.style.height = `${height}px`;\n        dom.style.width = `${width}px`;\n        this.width = width || this.dom.offsetWidth //图宽\n        this.height = height || this.height.offsetHeight//图高\n        this.data = data || {} //数据\n        this.decimal = {\n            price: decimal && decimal.price || 3,\n            value: decimal && decimal.value || 4\n        }//x轴小数位数\n        this.interval = interval || 2//中间间隙\n\n\n        this.style = this.deepObjectMerge(styeleConfing, style)\n\n        this.locale = locale\n\n\n        this.dataProvider = new DataProvider()\n\n        this.dataProvider.init(this.data, this.decimal, this.locale)\n        this.mainChart = new MainChart(this.dom, this.dataProvider, this.interval, this.style)\n        this.mainChart.init(this.dom)\n\n        this.maskChart = new MaskChart(this.dom, this.dataProvider, this.interval, this.style)\n        this.maskChart.init(this.dom)\n        this.calcChartDimensions()\n        this.initEvent()\n    }\n    /**\n      * 初始化事件\n    */\n    initEvent() {\n        const mouseEvent = new MouseEvent(this.maskChart, this.dataProvider, this.viewPortHandler);\n        let domNode = this.dom;\n\n        domNode.addEventListener('mousemove', (e) => {\n            mouseEvent.mouseMove(e)\n        })\n        domNode.addEventListener('mouseleave', (e) => {\n            mouseEvent.mouseLeave(e)\n        })\n\n    }\n    /**\n      * 修改数据源\n    */\n    updata(data) {\n        this.data = data\n        this.dataProvider.init(data, this.decimal, this.locale)\n        this.mainChart.flush()\n    }\n    /**\n    * 计算图的尺寸\n    */\n    calcChartDimensions() {\n        const xAxisHeight = this.calcXAxisHeight()//x轴高度\n        const yAxisWidth = this.calcYAxisWidth() //y轴宽度\n        const domWidth = this.width\n        const domHeight = this.height\n\n        let offsetLeft = 0\n        let offsetRight = 0\n        const offsetTop = 0\n        const offsetBottom = xAxisHeight\n        if (this.style.yAxis.position === 'left') {\n            offsetLeft = yAxisWidth\n        } else {\n            offsetRight = yAxisWidth\n        }\n        this.mainChart.setChartDimensions(0, domWidth, domHeight, offsetLeft, offsetRight, offsetTop, offsetBottom)\n        this.maskChart.setChartDimensions(0, domWidth, domHeight, offsetLeft, offsetRight, offsetTop, offsetBottom)\n    }\n\n\n    /**\n    * 计算x轴高度\n   */\n    calcXAxisHeight() {\n        return this.style.xAxis.height\n    }\n    /**\n   * 计算y轴宽度\n   */\n    calcYAxisWidth() {\n        return this.style.yAxis.width\n    }\n    deepObjectMerge(FirstOBJ, SecondOBJ) { // 深度合并对象\n        for (var key in SecondOBJ) {\n            FirstOBJ[key] = FirstOBJ[key] && FirstOBJ[key].toString() === \"[object Object]\" ?\n                this.deepObjectMerge(FirstOBJ[key], SecondOBJ[key]) : FirstOBJ[key] = SecondOBJ[key];\n        }\n        return FirstOBJ;\n    }\n\n}\nexport default DepthMainChart","import depthChart from \"./chart/RootChart\";\nexport default depthChart","import './setPublicPath'\nimport mod from '~entry'\nexport default mod\nexport * from '~entry'\n"],"sourceRoot":""}