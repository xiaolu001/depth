{"version":3,"sources":["webpack://depth-chart/webpack/universalModuleDefinition","webpack://depth-chart/webpack/bootstrap","webpack://depth-chart/./node_modules/current-script-polyfill/currentScript.js","webpack://depth-chart/./node_modules/@vue/cli-service/lib/commands/build/setPublicPath.js","webpack://depth-chart/./packages/internal/ViewPortHandler.js","webpack://depth-chart/./packages/chart/Chart.js","webpack://depth-chart/./packages/render/Render.js","webpack://depth-chart/./packages/render/AxisRender.js","webpack://depth-chart/./packages/render/XAxisRender.js","webpack://depth-chart/./packages/render/YAxisRender.js","webpack://depth-chart/./packages/render/MainRender.js","webpack://depth-chart/./packages/chart/MainChart.js","webpack://depth-chart/./packages/render/MaskRender.js","webpack://depth-chart/./packages/chart/MaskChart.js","webpack://depth-chart/./packages/internal/DataProvider.js","webpack://depth-chart/./packages/internal/eventHelper.js","webpack://depth-chart/./packages/internal/MouseEvent.js","webpack://depth-chart/./packages/chart/RootChart.js","webpack://depth-chart/./packages/index.js","webpack://depth-chart/./node_modules/@vue/cli-service/lib/commands/build/entry-lib.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;QCVA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;;;;;;;;;;;AClFA;;AAEA;;AAEA;AACA;AACA,wDAAwD;;AAExD;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,mBAAmB;AAChC;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,CAAC;;;;;;;;;;;;;ACnCD;;AAEA;AACA,MAAM,IAAuC;AAC7C,IAAI,mBAAO,CAAC,MAAyB;AACrC;;AAEA;AACA;AACA,IAAI,qBAAuB;AAC3B;AACA;;AAEA;AACe,sDAAI;;;ACdnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe,4EAAe;;;AClE2B;;AAEzD,MAAM,WAAK;AACX;AACA,+BAA+B,wBAAe;;AAE9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,SAAS;AAC3C,oCAAoC,MAAM;AAC1C,qCAAqC,OAAO;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,2DAAK,E;;AC1DpB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe,wDAAM;;;ACRQ;AAC7B,MAAM,qBAAU,SAAS,aAAM;AAC/B;AACA;AACA;AACA;AACe,2E;;ACNsB;;AAErC,MAAM,uBAAW,SAAS,iBAAU;;AAEpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,4DAA4D;;AAE5D;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACe,8E;;AC1DsB;;AAErC,MAAM,uBAAW,SAAS,iBAAU;;AAEpC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,kBAAkB;AACxC,SAAS;AACT;AACA,sBAAsB,kBAAkB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACe,uE;;AClGc;AAC7B,MAAM,qBAAU,SAAS,aAAM;AAC/B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,aAAa;AAC5B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,2E;;ACvEY;AACoB;AACA;AACF;AAC7C,MAAM,mBAAS,SAAS,WAAK;AAC7B;AACA;AACA;AACA,+BAA+B,kBAAW;AAC1C,+BAA+B,WAAW;AAC1C,8BAA8B,iBAAU;AACxC;AACA;AACA,eAAe,sBAAsB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACe,uE;;;;;ACrBe;AACY;AAC1C,MAAM,qBAAU,SAAS,aAAM;AAC/B;AACA;AACA;AACA;AACA,sBAAsB,aAAM;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,wBAAwB,kCAAkC;AAC1D;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,wBAAwB,8CAA8C;AACtE;AACA;AACA;AACe,2EAAU,E;;ACxFE;AACkB;AAC7C,MAAM,mBAAS,SAAS,WAAK;AAC7B;AACA;AACA;AACA;AACA,8BAA8B,iBAAU;;;AAGxC;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACe,uEAAS,E;;;ACvDxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,SAAS;AAChC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,SAAS;AAChC;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uBAAuB,SAAS;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACe,sE;;;ACrLf;AACA;AACA;AACA;AACO;AACP;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;;;;AChBmD;AACnD,MAAM,qBAAU;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,kBAAkB;AAC/B,QAAQ,SAAS;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,SAAS;;AAEjB;AACA;AACA;AACe,6EAAU,E;;;;;;ACrBE;;;AAGQ;AACA;AACgB;AACJ;AACC;AAChD,MAAM,wBAAc,SAAS,WAAK;AAClC;AACA;AACA,aAAa,6DAA6D;AAC1E;AACA;AACA,8BAA8B,OAAO;AACrC,6BAA6B,MAAM;AACnC;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA,SAAS;AACT;AACA,0CAA0C,MAAa;AACvD;AACA,gCAAgC,qBAAY;AAC5C;AACA,6BAA6B,eAAS;AACtC;AACA,6BAA6B,eAAS;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,mBAAU;AACzC;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACe,sE;;ACvG4B;AAC5B,wD;;ACDS;AACA;AACT,yFAAG;AACI","file":"depth-chart.umd.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"depth-chart\"] = factory();\n\telse\n\t\troot[\"depth-chart\"] = factory();\n})((typeof self !== 'undefined' ? self : this), function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"fb15\");\n","// document.currentScript polyfill by Adam Miller\n\n// MIT license\n\n(function(document){\n  var currentScript = \"currentScript\",\n      scripts = document.getElementsByTagName('script'); // Live NodeList collection\n\n  // If browser needs currentScript polyfill, add get currentScript() to the document object\n  if (!(currentScript in document)) {\n    Object.defineProperty(document, currentScript, {\n      get: function(){\n\n        // IE 6-10 supports script readyState\n        // IE 10+ support stack trace\n        try { throw new Error(); }\n        catch (err) {\n\n          // Find the second match for the \"at\" string to get file src url from stack.\n          // Specifically works with the format of stack traces in IE.\n          var i, res = ((/.*at [^\\(]*\\((.*):.+:.+\\)$/ig).exec(err.stack) || [false])[1];\n\n          // For all scripts on the page, if src matches or if ready state is interactive, return the script tag\n          for(i in scripts){\n            if(scripts[i].src == res || scripts[i].readyState == \"interactive\"){\n              return scripts[i];\n            }\n          }\n\n          // If no match, return null\n          return null;\n        }\n      }\n    });\n  }\n})(document);\n","// This file is imported into lib/wc client bundles.\n\nif (typeof window !== 'undefined') {\n  if (process.env.NEED_CURRENTSCRIPT_POLYFILL) {\n    require('current-script-polyfill')\n  }\n\n  var i\n  if ((i = window.document.currentScript) && (i = i.src.match(/(.+\\/)[^/]+\\.js(\\?.*)?$/))) {\n    __webpack_public_path__ = i[1] // eslint-disable-line\n  }\n}\n\n// Indicate to webpack that this file can be concatenated\nexport default null\n","class ViewPortHandler {\r\n  constructor() {\r\n    // 绘制区域参数\r\n    this.contentRect = {\r\n      left: 0,\r\n      right: 0,\r\n      top: 0,\r\n      bottom: 0\r\n    }\r\n    // 整个view的高度\r\n    this.height = 0\r\n    // 整个view的宽度\r\n    this.width = 0\r\n  }\r\n\r\n  /**\r\n   * 设置尺寸\r\n   * @param width\r\n   * @param height\r\n   * @param offsetLeft\r\n   * @param offsetRight\r\n   * @param offsetTop\r\n   * @param offsetBottom\r\n   */\r\n  setDimensions(width, height, offsetLeft, offsetRight, offsetTop, offsetBottom) {\r\n\r\n    this.width = width\r\n    this.height = height\r\n    this.contentRect.left = offsetLeft\r\n    this.contentRect.right = offsetRight\r\n    this.contentRect.top = offsetTop\r\n    this.contentRect.bottom = offsetBottom\r\n  }\r\n\r\n  contentTop() {\r\n    return this.contentRect.top\r\n  }\r\n\r\n  contentLeft() {\r\n    return this.contentRect.left\r\n  }\r\n\r\n  contentRight() {\r\n    return this.width - this.contentRect.right\r\n  }\r\n\r\n  contentBottom() {\r\n    return this.height - this.contentRect.bottom\r\n  }\r\n  // mainChartWidth(){\r\n\r\n  // }\r\n  // mainChartWidth(){\r\n\r\n  // }\r\n  /**\r\n   * 获取中间点坐标\r\n   */\r\n  getContentCenter() {\r\n    const point = {}\r\n    point.x = (this.contentLeft() + this.contentRight()) / 2\r\n    point.y = (this.contentTop() + this.contentBottom()) / 2\r\n    return point\r\n  }\r\n}\r\n\r\nexport default ViewPortHandler\r\n","import ViewPortHandler from '../internal/ViewPortHandler'\r\n\r\nclass Chart {\r\n  constructor() {\r\n    this.viewPortHandler = new ViewPortHandler();\r\n\r\n  }\r\n  init(dom) {\r\n    if (dom) {\r\n      const canvasDom = document.createElement('canvas');\r\n      canvasDom.style.position = 'absolute'\r\n      canvasDom.style.right = '0'\r\n      canvasDom.style.left = '0'\r\n      this.canvasDom = canvasDom;\r\n      this.ctx = this.canvasDom.getContext('2d');\r\n      dom.appendChild(this.canvasDom);\r\n    }\r\n\r\n  }\r\n  /**\r\n* 设置图尺寸\r\n* @param chartTop\r\n* @param width\r\n* @param height\r\n* @param offsetLeft\r\n* @param offsetRight\r\n* @param offsetTop\r\n* @param offsetBottom\r\n*/\r\n  setChartDimensions(chartTop, width, height, offsetLeft, offsetRight, offsetTop = 0, offsetBottom = 25) {\r\n    this.clearCanvas()\r\n    this.canvasDom.style.top = `${chartTop}px`\r\n    this.canvasDom.style.width = `${width}px`\r\n    this.canvasDom.style.height = `${height}px`\r\n    this.canvasDom.width = width\r\n    this.canvasDom.height = height\r\n    this.viewPortHandler.setDimensions(width, height, offsetLeft, offsetRight, offsetTop, offsetBottom)\r\n    this.draw()\r\n  }\r\n  /**\r\n* 清空画布\r\n*/\r\n  clearCanvas() {\r\n    this.ctx.clearRect(0, 0, this.viewPortHandler.width, this.viewPortHandler.height)\r\n  }\r\n  /**\r\n   * 刷新\r\n   */\r\n  flush() {\r\n    this.clearCanvas()\r\n    this.draw()\r\n  }\r\n  /**\r\n* 绘制\r\n*/\r\n  draw() {\r\n  }\r\n}\r\nexport default Chart;","class Render {\r\n  constructor(viewPortHandler, dataProvider, interval) {\r\n    this.viewPortHandler = viewPortHandler\r\n    this.dataProvider = dataProvider\r\n    this.interval = interval\r\n  }\r\n}\r\n\r\nexport default Render\r\n","import Render from './Render'\r\nclass AxisRender extends Render {\r\n    constructor(viewPortHandler, dataProvider,interval) {\r\n        super(viewPortHandler, dataProvider,interval)\r\n    }\r\n}\r\nexport default AxisRender","import AxisRender from \"./AxisRender\"\r\n\r\nclass XAxisRender extends AxisRender {\r\n\r\n    /**\r\n    * 绘制轴线\r\n    * @param ctx\r\n    * @param xAxis\r\n    */\r\n    renderAxisLine(ctx, xAxis) {\r\n        ctx.strokeStyle = xAxis.line.color //轴线颜色\r\n        ctx.lineWidth = xAxis.line.size //轴线粗细\r\n        ctx.beginPath()\r\n        ctx.moveTo(this.viewPortHandler.contentLeft(), this.viewPortHandler.contentBottom())\r\n        ctx.lineTo(this.viewPortHandler.contentRight(), this.viewPortHandler.contentBottom())\r\n        ctx.stroke()\r\n        ctx.closePath()\r\n    }\r\n\r\n    /**\r\n    * 绘制刻度\r\n    * @param ctx\r\n    * @param xAxis\r\n    */\r\n    renderTickLines(ctx, xAxis) {\r\n        ctx.lineWidth = xAxis.tickLine.size\r\n        ctx.strokeStyle = xAxis.tickLine.color\r\n        ctx.textAlign = 'center'\r\n        ctx.font = \"12px sans-serif\"\r\n        ctx.fillStyle = xAxis.tickLine.color;\r\n        const startY = this.viewPortHandler.contentBottom()\r\n        const endY = startY + 5\r\n        const startX = (this.viewPortHandler.contentRight() / 30)\r\n        \r\n         let yAxisWidth = 0\r\n        // if (yAxis.position === \"left\") {\r\n        //     yAxisWidth += yAxis.width\r\n        // }\r\n        const divide = startX * 4\r\n        const difference = this.dataProvider.adjacent() * 2;  //this.dataProvider.maxPrice() - this.dataProvider.minPrice();\r\n\r\n        const startVol = difference / 30\r\n        const divideVol = startVol * 4\r\n        const decimal = this.dataProvider.getPriceDecimal()\r\n        for (let i = 0; i < 8; i++) {\r\n            const x = yAxisWidth + startX + i * divide;\r\n            const vol = this.dataProvider.minPrice() + startVol + i * divideVol;\r\n            ctx.beginPath()\r\n            ctx.moveTo(x, startY)\r\n            ctx.lineTo(x, endY)\r\n\r\n            ctx.fillText(vol.toFixed(decimal), x, endY + 10);\r\n            ctx.stroke()\r\n            ctx.closePath()\r\n        }\r\n    }\r\n\r\n}\r\nexport default XAxisRender","import AxisRender from \"./AxisRender\"\r\n\r\nclass XAxisRender extends AxisRender {\r\n\r\n    /**\r\n   * 绘制轴线\r\n   * @param ctx\r\n   * @param yAxis\r\n   */\r\n    renderAxisLine(ctx, yAxis) {\r\n\r\n        ctx.strokeStyle = yAxis.line.color\r\n        ctx.lineWidth = yAxis.line.size\r\n        ctx.beginPath()\r\n        if (yAxis.position === 'left') {\r\n            ctx.moveTo(this.viewPortHandler.contentLeft(), this.viewPortHandler.contentTop())\r\n            ctx.lineTo(this.viewPortHandler.contentLeft(), this.viewPortHandler.contentBottom())\r\n        } else {\r\n            ctx.moveTo(this.viewPortHandler.contentRight(), this.viewPortHandler.contentTop())\r\n            ctx.lineTo(this.viewPortHandler.contentRight(), this.viewPortHandler.contentBottom())\r\n        }\r\n\r\n        ctx.stroke()\r\n        ctx.closePath()\r\n    }\r\n    /**\r\n   * 绘制刻度\r\n   * @param ctx\r\n   * @param xAxis\r\n   */\r\n    renderTickLines(ctx, yAxis) {\r\n        ctx.lineWidth = yAxis.tickLine.size;\r\n        ctx.strokeStyle = yAxis.tickLine.color;\r\n        ctx.font = \"12px sans-serif\";\r\n        ctx.textBaseline = \"middle\";\r\n        ctx.textAlign = \"left\";\r\n        ctx.fillStyle = yAxis.tickLine.color;\r\n        const tickLineLength = 5;\r\n        let startX;\r\n        let endX;\r\n        if (yAxis.position === 'left') {\r\n            startX = this.viewPortHandler.contentLeft()\r\n            if (yAxis.tickTextPosition === 'outside') {\r\n                endX = startX - tickLineLength //刻度内置\r\n            } else {\r\n                endX = startX + tickLineLength//刻度外置\r\n            }\r\n        } else {\r\n            startX = this.viewPortHandler.contentRight()\r\n            if (yAxis.tickTextPosition === 'outside') {\r\n                endX = startX + tickLineLength//刻度内置\r\n            } else {\r\n                endX = startX - tickLineLength//刻度外置\r\n            }\r\n        }\r\n\r\n        const height = this.viewPortHandler.contentBottom();\r\n        const maxVol = this.dataProvider.maxVol()\r\n        const divide = (height / 16) * 3\r\n        const divideVol = (maxVol / 16) * 3\r\n\r\n        for (let i = 0; i < 6; i++) {\r\n            const y = height - i * divide\r\n            const xVol = this.renderTickLinesValue(i * divideVol)\r\n            ctx.beginPath()\r\n            ctx.moveTo(startX, y)\r\n            ctx.lineTo(endX, y)\r\n            ctx.fillText(xVol, endX + 5, y)\r\n            ctx.stroke()\r\n            ctx.closePath()\r\n        }\r\n    }\r\n    /**\r\n     * 刻度值显示规则处理\r\n     * @param value\r\n     */\r\n    renderTickLinesValue(value) {\r\n        if (value > 1000) {\r\n            let val = (value / 10000).toString()\r\n            return `${this.decimal(val)}K`\r\n        } else if (value > 1000000) {\r\n            let val = (value / 1000000).toString()\r\n            return `${this.decimal(val)}M`\r\n        }\r\n        return this.decimal(value.toString())\r\n    }\r\n    decimal(val) {\r\n        if (val.indexOf('.') > -1) {\r\n            let str = val.substr(0, 5);\r\n            if (str.charAt(str.length - 1) === '.') {\r\n                return val.substr(0, 4)\r\n            }\r\n            return str\r\n        } else {\r\n            return val.substr(0, 4)\r\n        }\r\n    }\r\n}\r\nexport default XAxisRender","import Render from \"./Render\"\r\nclass MainRender extends Render {\r\n    renderDraw(ctx, depth) {\r\n\r\n        const max = this.dataProvider.maxVol()\r\n        const width = (this.viewPortHandler.contentRight() - this.interval) / 2\r\n        const height = this.viewPortHandler.contentBottom()\r\n        const leftData = this.dataProvider.leftData\r\n        const rightData = this.dataProvider.rightData\r\n        const leftDataLenght = leftData.length\r\n        const rightDataLenght = rightData.length\r\n        const letfDataWidth = width / leftDataLenght\r\n        const rightDataWidth = width / rightDataLenght\r\n        const { background } = depth\r\n        this.drawBg(ctx, this.viewPortHandler.width, this.viewPortHandler.height, background)\r\n        this.drawLeft(ctx, width, height, max, leftData, letfDataWidth, depth)\r\n        this.drawRight(ctx, width, height, max, rightData, rightDataWidth, depth)\r\n\r\n    }\r\n    drawLeft(ctx, width, height, max, leftData, dataWidth, depth) {\r\n        let x = 0, y = 0\r\n        ctx.beginPath()\r\n        ctx.lineWidth = 2\r\n        ctx.moveTo(width, height)\r\n        leftData.forEach((item, index) => {\r\n            x = width - parseInt(index) * dataWidth\r\n            y = height - item.t / max * height\r\n            ctx.lineTo(x, y)\r\n        })\r\n        ctx.fillStyle = depth.buyColor\r\n        ctx.strokeStyle = depth.buyColor\r\n        ctx.stroke()\r\n        ctx.globalAlpha = depth.globalAlpha\r\n        ctx.lineTo(0, y)\r\n        ctx.lineTo(0, height)\r\n        ctx.lineTo(width, height)\r\n        ctx.fill()\r\n        ctx.closePath()\r\n    }\r\n    drawRight(ctx, width, height, max, rightData, dataWidth, depth) {\r\n        let x = 0, y = 0\r\n        ctx.beginPath()\r\n        ctx.globalAlpha = 1\r\n        ctx.lineWidth = depth.lineWidth\r\n        ctx.moveTo(width + this.interval, height)\r\n        rightData.forEach((item, index) => {\r\n            x = width + this.interval + parseInt(index) * dataWidth + 1\r\n            y = height - item.t / max * height\r\n            ctx.lineTo(x, y)\r\n        })\r\n        ctx.fillStyle = depth.sellColor\r\n        ctx.strokeStyle = depth.sellColor\r\n        ctx.shadowColor = \"none\"\r\n        ctx.stroke()\r\n        ctx.globalAlpha = depth.globalAlpha\r\n        ctx.lineTo(width * 2 + this.interval, y)\r\n        ctx.lineTo(width * 2 + this.interval, height)\r\n        ctx.lineTo(width + this.interval, height)\r\n        ctx.fill()\r\n        ctx.closePath()\r\n\r\n    }\r\n    drawBg(ctx, width, height, background) {\r\n\r\n        ctx.beginPath()\r\n        ctx.globalAlpha = 1\r\n        ctx.fillStyle = background\r\n        ctx.fillRect(0, 0, width, height)\r\n        ctx.closePath()\r\n    }\r\n}\r\nexport default MainRender","import Chart from \"./Chart\"\r\nimport XAxisRender from \"../render/XAxisRender\"\r\nimport YAxisRender from \"../render/YAxisRender\"\r\nimport MainRender from \"../render/MainRender\"\r\nclass MainChart extends Chart {\r\n    constructor(dom, dataProvider, interval, style) {\r\n        super(dom)\r\n        this.style = style;\r\n        this.xAxisRender = new XAxisRender(this.viewPortHandler, dataProvider, interval)\r\n        this.yAxisRender = new YAxisRender(this.viewPortHandler, dataProvider, interval)\r\n        this.mainRender = new MainRender(this.viewPortHandler, dataProvider, interval)\r\n    }\r\n    draw() {\r\n        const { xAxis, yAxis, depth } = this.style\r\n        this.mainRender.renderDraw(this.ctx, depth)\r\n        this.yAxisRender.renderAxisLine(this.ctx, yAxis)\r\n        this.yAxisRender.renderTickLines(this.ctx, yAxis)\r\n        this.xAxisRender.renderAxisLine(this.ctx, xAxis)\r\n        this.xAxisRender.renderTickLines(this.ctx, xAxis,yAxis)\r\n    }\r\n}\r\nexport default MainChart","import Render from \"./Render\";\r\nimport locale from \"../config/locale.json\"\r\nclass MaskRender extends Render {\r\n    constructor(viewPortHandler, dataProvider, interval) {\r\n        super(viewPortHandler, dataProvider, interval)\r\n        this.interval = interval;\r\n        this.dataProvider = dataProvider;\r\n        this.locale = locale[this.dataProvider.getLocale()]\r\n        this.priceDecimal = this.dataProvider.getPriceDecimal()\r\n        this.valueDecimal = this.dataProvider.getValueDecimal()\r\n    }\r\n    point(ctx, offsetX, offsetY, selectColor) {\r\n        ctx.beginPath()\r\n        ctx.globalAlpha = 0.5\r\n        ctx.fillStyle = selectColor\r\n        ctx.arc(offsetX, offsetY, 12, 0, 2 * Math.PI)\r\n        ctx.fill()\r\n        ctx.closePath()\r\n        ctx.beginPath()\r\n        ctx.globalAlpha = 0.8\r\n        ctx.fillStyle = selectColor\r\n\r\n        ctx.arc(offsetX, offsetY, 8, 0, 2 * Math.PI)\r\n        ctx.fill()\r\n        ctx.closePath()\r\n        ctx.beginPath()\r\n        ctx.globalAlpha = 1\r\n        ctx.fillStyle = 'rgba(255,255,255, 1)'\r\n        ctx.arc(offsetX, offsetY, 5, 0, 2 * Math.PI)\r\n        ctx.fill()\r\n        ctx.closePath()\r\n    }\r\n    popup(ctx, offsetX, offsetY, selectColor, direction) {\r\n\r\n        offsetY = offsetY > 140 ? offsetY - 130 : offsetY + 30;\r\n\r\n        let newOffsetX = direction ? offsetX - 160 : offsetX\r\n\r\n        //线\r\n        ctx.beginPath()\r\n\r\n        ctx.globalAlpha = 1\r\n        ctx.fillStyle = selectColor;\r\n        ctx.fillRect(offsetX, offsetY, 4, 100)\r\n        ctx.closePath()\r\n        //框\r\n        ctx.beginPath()\r\n        ctx.fillStyle = selectColor;\r\n        ctx.globalAlpha = 0.4\r\n\r\n        ctx.fillRect(newOffsetX, offsetY, 160, 100)\r\n        ctx.closePath()\r\n\r\n    }\r\n    labelText(ctx, offsetX, offsetY, selectColor, direction, item) {\r\n        offsetY = offsetY > 140 ? offsetY : offsetY + 160;\r\n        let newOffsetX = direction ? offsetX - 140 : offsetX + 20\r\n\r\n        ctx.beginPath()\r\n        ctx.font = '14px SFCompactDisplay-Semibold,SFCompactDisplay'\r\n        ctx.fillStyle = selectColor\r\n        ctx.globalAlpha = 0.8\r\n        ctx.fillText(this.locale['price'], newOffsetX, offsetY - 110);\r\n        ctx.closePath()\r\n\r\n        ctx.beginPath()\r\n        ctx.font = '14px bold'\r\n        ctx.fillStyle = \"#fff\";\r\n        ctx.globalAlpha = 1\r\n        ctx.fillText(`${item.p.toFixed(this.priceDecimal)}`, newOffsetX, offsetY - 90);\r\n        ctx.closePath()\r\n\r\n        ctx.beginPath()\r\n        ctx.font = '14px bold'\r\n        ctx.fillStyle = selectColor\r\n        ctx.globalAlpha = 0.8\r\n\r\n        ctx.fillText(this.locale['sum'], newOffsetX, offsetY - 65);\r\n        ctx.closePath()\r\n\r\n        ctx.beginPath()\r\n        ctx.font = '14px bold'\r\n        ctx.fillStyle = \"#fff\";\r\n        ctx.globalAlpha = 1\r\n        ctx.fillText(`${parseFloat(item.t).toFixed(this.valueDecimal)}`, newOffsetX, offsetY - 45);\r\n        ctx.closePath()\r\n    }\r\n}\r\nexport default MaskRender;","import Chart from \"./Chart\"\r\nimport MaskRender from \"../render/MaskRender\"\r\nclass MaskChart extends Chart {\r\n    constructor(dom, dataProvider, interval, style) {\r\n        super(dom)\r\n        this.interval = interval;\r\n        this.dataProvider = dataProvider;\r\n        this.maskRender = new MaskRender(this.viewPortHandler,dataProvider, interval);\r\n        \r\n\r\n        this.style = style;\r\n       \r\n    }\r\n   \r\n    draw(offsetX) {\r\n        this.maxVol = this.dataProvider.maxVol()\r\n      \r\n        let width = this.viewPortHandler.contentRight();\r\n        let height = this.viewPortHandler.contentBottom()\r\n        let halfWidth = width / 2;\r\n        let middleStart = halfWidth - this.interval / 2;\r\n        let middleEnd = halfWidth + this.interval / 2;\r\n        if ((middleStart < offsetX && offsetX < middleEnd) || offsetX > width || offsetX < 0) {\r\n            return false;\r\n        }\r\n        let direction = offsetX > halfWidth ? true : false\r\n        let { depth } = this.style\r\n        let selectColor = !direction ? depth.buyColor : depth.sellColor\r\n        let itemWidth = middleStart / 200;\r\n        let offsetXIndex = Math.floor(offsetX / itemWidth) || 0\r\n        let intervalIndex = Math.floor(this.interval / itemWidth) || 0\r\n        let index = offsetXIndex > 199 ? (offsetXIndex - intervalIndex) : offsetXIndex;\r\n\r\n        let data = []\r\n        if (direction) {\r\n            data = this.dataProvider.rightData\r\n            index = index - 200;\r\n        } else {\r\n            data = this.dataProvider.leftData\r\n            index = 199 - index;\r\n        }\r\n        let item = data[index];\r\n       \r\n        if (item) {\r\n            let offsetY = height - item.t / this.maxVol * height\r\n            this.maskRender.point(this.ctx, offsetX, offsetY, selectColor)\r\n            this.maskRender.popup(this.ctx, offsetX, offsetY, selectColor, direction, item)\r\n            this.maskRender.labelText(this.ctx, offsetX, offsetY, selectColor, direction, item)\r\n        }\r\n\r\n    }\r\n    flush(offsetX, offsetY) {\r\n        this.clearCanvas()\r\n        this.draw(offsetX, offsetY)\r\n    }\r\n}\r\nexport default MaskChart;","\r\nclass DataProvider {\r\n    constructor() {\r\n        this.data = {}\r\n        this.decimal = 0\r\n        this.leftData = []\r\n        this.rightData = []\r\n    }\r\n    init(data, decimal, locale) {\r\n        this.data = data\r\n        this.length = 200;\r\n        this.decimal = decimal\r\n        this.locale = locale\r\n        this.leftData = this.dataFill(this.data['bids'] || [], 'bids') //买\r\n        this.rightData = this.dataFill(this.data['asks'] || [], 'asks') //卖\r\n    }\r\n\r\n    /**\r\n     * x轴半轴长\r\n     * \r\n     */\r\n    adjacent() {\r\n        let leftArray = this.data['bids'] || []\r\n        let leftArrayLength = leftArray.length;\r\n        let rightArray = this.data['asks'] || []\r\n        let rightArrayLength = rightArray.length;\r\n        if (leftArrayLength < 1 || rightArrayLength < 1) {\r\n            console.log(\"数据长度不够\")\r\n            return false\r\n        }\r\n        //  debugger\r\n        let vol1 = 0, vol2 = 0;\r\n        if (leftArrayLength > 1) {\r\n            vol1 = Math.abs(parseFloat(leftArray[0].price) - parseFloat(leftArray[leftArrayLength - 1].price))\r\n        } else {\r\n            vol1 = parseFloat(leftArray[0].price)\r\n        }\r\n        if (rightArrayLength > 1) {\r\n            vol2 = Math.abs(parseFloat(rightArray[0].price) - parseFloat(rightArray[rightArrayLength - 1].price))\r\n        } else {\r\n            vol2 = parseFloat(rightArray[0].price)\r\n        }\r\n\r\n        const min = Math.min(vol1, vol2);\r\n        return min\r\n    }\r\n    getPriceDecimal() {\r\n        return parseInt(this.decimal.price)\r\n    }\r\n    getValueDecimal() {\r\n        return parseInt(this.decimal.value)\r\n    }\r\n    getLocale() {\r\n        return this.locale\r\n    }\r\n    initDataLeft(key) {\r\n        let arr = []\r\n        let minPrice = this.minPrice();\r\n\r\n        let semiaxis = this.adjacent()\r\n        let difference = semiaxis / this.length\r\n        let len = this.length\r\n        let total = 0\r\n        if (key == 'asks') {\r\n            minPrice = minPrice + semiaxis;\r\n        }\r\n        for (let i = 0; i < len; i++) {\r\n            let obj = {\r\n                p: minPrice + difference * i,\r\n                v: 0,\r\n                t: total\r\n            }\r\n\r\n            arr.push(obj)\r\n        }\r\n        if (key == 'asks') {\r\n            return arr\r\n        }\r\n        return arr.reverse()\r\n    }\r\n    dataFill(array, key) {\r\n        let arr = this.initDataLeft(key)\r\n        let len = this.length\r\n        let semiaxis = this.adjacent()\r\n        let difference = semiaxis / this.length\r\n        let total = 0\r\n        for (let i = 0; i < len; i++) {\r\n            let item = arr[i]\r\n\r\n            array.forEach(element => {\r\n                if (Math.abs(item.p - element.price) < difference) {\r\n                    total = total + parseFloat(element.volume)\r\n                    item.v = parseFloat(element.volume)\r\n\r\n                }\r\n                item.t = total.toFixed(8);\r\n            })\r\n\r\n        }\r\n        return arr;\r\n    }\r\n    originalData(array, key) {\r\n        let arr = []\r\n        let min = this.minPrice();\r\n        let semiaxis = this.adjacent()\r\n        let minPrice = min\r\n        if (key == 'asks') {\r\n            minPrice = min + semiaxis;\r\n        } else {\r\n            // debugger\r\n            // console.log('bids', array)\r\n            // let arr1 = array = array.reverse()\r\n            // console.log('bids', arr1)\r\n        }\r\n\r\n        let difference = semiaxis / this.length\r\n        let len = this.length;\r\n        let total = 0\r\n        for (let i = 0; i < len; i++) {\r\n            let obj = {\r\n                p: minPrice + difference * i,\r\n                v: 0,\r\n                t: total\r\n            }\r\n            array.forEach(element => {\r\n                if (Math.abs(obj.p - element.price) < difference) {\r\n                    total = total + element.volume;\r\n                    obj.v = element.volume\r\n                    obj.t = total;\r\n                }\r\n            })\r\n            arr.push(obj);\r\n        }\r\n        //console.log(arr)\r\n        return arr\r\n    }\r\n    processingData(array) {\r\n        let total = 0\r\n        let arr = []\r\n        let max = this.maxPrice();\r\n        if (array.length > 0) {\r\n            let keys = Object.keys(array[0])\r\n            array.forEach(element => {\r\n                // console.log(element,max)\r\n                if (element.price > max) {\r\n                    return;\r\n                }\r\n                total += element[keys[1]]\r\n                element = {\r\n                    p: element[keys[0]],\r\n                    v: element[keys[1]],\r\n                    t: total\r\n                }\r\n\r\n                arr.push(element)\r\n            })\r\n            // console.log(arr)\r\n            return arr\r\n        }\r\n        return []\r\n\r\n    }\r\n    maxPrice() {\r\n        return this.adjacent() * 2 + this.minPrice();\r\n    }\r\n    minPrice() {\r\n        let len = this.data['bids'] && this.data['bids'].length - 1 || 0\r\n        if (len > 0) {\r\n            return parseFloat(this.data['bids'][len].price)\r\n        } else {\r\n            return parseFloat(this.data['bids'][0].price)\r\n        }\r\n    }\r\n    maxVol() {\r\n        let leftLen = this.leftData.length - 1;\r\n        let rightLent = this.rightData.length - 1\r\n        let max = Math.max(parseFloat(this.leftData[leftLen].t), parseFloat(this.rightData[rightLent].t))\r\n        return max + max / 8\r\n\r\n    }\r\n\r\n}\r\nexport default DataProvider","\n/**\n * 阻止事件\n * @param e\n */\nexport function stopEvent (e) {\n  if (e && e.stopPropagation) {\n    e.stopPropagation()\n  } else {\n    window.event.cancelBubble = true\n  }\n  if (e && e.preventDefault) {\n    e.preventDefault()\n  } else {\n    window.event.returnValue = false\n  }\n}\n\n\n","import { stopEvent } from \"../internal/eventHelper\"\r\nclass MouseEvent {\r\n    constructor(maskChart, dataProvider, viewPortHandler) {\r\n        this.maskChart = maskChart;\r\n        this.dataProvider = dataProvider;\r\n        this.viewPortHandler = viewPortHandler;\r\n    }\r\n    mouseMove(e) {\r\n        let { offsetX,offsetY } = e;\r\n        stopEvent(e)\r\n        if (!this.waitingForMouseMoveAnimationFrame) {\r\n            this.waitingForMouseMoveAnimationFrame = true\r\n            this.maskChart.flush(offsetX,offsetY);\r\n            this.waitingForMouseMoveAnimationFrame = false\r\n        }\r\n    }\r\n    mouseLeave(e) {\r\n        stopEvent(e)\r\n\r\n        this.maskChart.clearCanvas();\r\n    }\r\n}\r\nexport default MouseEvent;","\r\nimport Chart from \"./Chart\"\r\n\r\n\r\nimport MainChart from \"./MainChart\"\r\nimport MaskChart from \"./MaskChart\"\r\nimport DataProvider from \"../internal/DataProvider\"\r\nimport MouseEvent from \"../internal/MouseEvent\"\r\nimport styeleConfing from \"../config/index.json\"\r\nclass DepthMainChart extends Chart {\r\n    constructor(params) {\r\n        super(params.dom)\r\n        let { dom, width, height, data, decimal, interval, style, locale } = params\r\n        this.dom = dom\r\n        dom.style.position = 'relative'\r\n        dom.style.height = `${height}px`;\r\n        dom.style.width = `${width}px`;\r\n        this.width = width || this.dom.offsetWidth //图宽\r\n        this.height = height || this.height.offsetHeight//图高\r\n        this.data = data || {} //数据\r\n        this.decimal = {\r\n            price: decimal && decimal.price || 3,\r\n            value: decimal && decimal.value || 4\r\n        }//x轴小数位数\r\n        this.interval = interval || 2//中间间隙\r\n        this.style = this.deepObjectMerge(styeleConfing, style)\r\n        this.locale = locale\r\n        this.dataProvider = new DataProvider()\r\n        this.dataProvider.init(this.data, this.decimal, this.locale)\r\n        this.mainChart = new MainChart(this.dom, this.dataProvider, this.interval, this.style)\r\n        this.mainChart.init(this.dom)\r\n        this.maskChart = new MaskChart(this.dom, this.dataProvider, this.interval, this.style)\r\n        this.maskChart.init(this.dom)\r\n        this.calcChartDimensions()\r\n        this.initEvent()\r\n    }\r\n    /**\r\n      * 初始化事件\r\n    */\r\n    initEvent() {\r\n        const mouseEvent = new MouseEvent(this.maskChart, this.dataProvider, this.viewPortHandler);\r\n        let domNode = this.dom;\r\n\r\n        domNode.addEventListener('mousemove', (e) => {\r\n            mouseEvent.mouseMove(e)\r\n        })\r\n        domNode.addEventListener('mouseleave', (e) => {\r\n            mouseEvent.mouseLeave(e)\r\n        })\r\n\r\n    }\r\n    /**\r\n      * 修改数据源\r\n    */\r\n    updata(data) {\r\n        this.data = data\r\n        this.dataProvider.init(data, this.decimal, this.locale)\r\n        this.mainChart.flush()\r\n    }\r\n    /**\r\n    * 计算图的尺寸\r\n    */\r\n    calcChartDimensions() {\r\n        const xAxisHeight = this.calcXAxisHeight()//x轴高度\r\n        const yAxisWidth = this.calcYAxisWidth() //y轴宽度\r\n        const domWidth = this.width\r\n        const domHeight = this.height\r\n\r\n        let offsetLeft = 0\r\n        let offsetRight = 0\r\n        const offsetTop = 0\r\n        const offsetBottom = xAxisHeight\r\n        if (this.style.yAxis.position === 'left') {\r\n            offsetLeft = yAxisWidth\r\n        } else {\r\n            offsetRight = yAxisWidth\r\n        }\r\n        this.mainChart.setChartDimensions(0, domWidth, domHeight, offsetLeft, offsetRight, offsetTop, offsetBottom)\r\n        this.maskChart.setChartDimensions(0, domWidth, domHeight, offsetLeft, offsetRight, offsetTop, offsetBottom)\r\n    }\r\n\r\n\r\n    /**\r\n    * 计算x轴高度\r\n   */\r\n    calcXAxisHeight() {\r\n        return this.style.xAxis.height\r\n    }\r\n    /**\r\n   * 计算y轴宽度\r\n   */\r\n    calcYAxisWidth() {\r\n        return this.style.yAxis.width\r\n    }\r\n    deepObjectMerge(FirstOBJ, SecondOBJ) { // 深度合并对象\r\n        for (var key in SecondOBJ) {\r\n            FirstOBJ[key] = FirstOBJ[key] && FirstOBJ[key].toString() === \"[object Object]\" ?\r\n                this.deepObjectMerge(FirstOBJ[key], SecondOBJ[key]) : FirstOBJ[key] = SecondOBJ[key];\r\n        }\r\n        return FirstOBJ;\r\n    }\r\n\r\n}\r\nexport default DepthMainChart","import depthChart from \"./chart/RootChart\";\r\nexport default depthChart","import './setPublicPath'\nimport mod from '~entry'\nexport default mod\nexport * from '~entry'\n"],"sourceRoot":""}